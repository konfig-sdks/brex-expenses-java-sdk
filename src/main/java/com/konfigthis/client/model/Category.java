/*
 * Expenses API
 *  The Expenses API allows you to manage accounting and expenses information. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The category of expenses.
 */
@JsonAdapter(Category.Adapter.class)public enum Category {
  
  ADVERTISING_AND_MARKETING("ADVERTISING_AND_MARKETING"),
  
  GROCERY("GROCERY"),
  
  TELEPHONY("TELEPHONY"),
  
  OFFICE_SUPPLIES("OFFICE_SUPPLIES"),
  
  PRIVATE_AIR_TRAVEL("PRIVATE_AIR_TRAVEL"),
  
  CLOTHING("CLOTHING"),
  
  CAR_RENTAL("CAR_RENTAL"),
  
  VEHICLE_EXPENSES("VEHICLE_EXPENSES"),
  
  RESTAURANTS("RESTAURANTS"),
  
  GAMBLING("GAMBLING"),
  
  FLOWERS("FLOWERS"),
  
  ELECTRONICS("ELECTRONICS"),
  
  LEGAL_SERVICES("LEGAL_SERVICES"),
  
  UTILITIES("UTILITIES"),
  
  FURNITURE("FURNITURE"),
  
  BARS_AND_NIGHTLIFE("BARS_AND_NIGHTLIFE"),
  
  LAUNDRY("LAUNDRY"),
  
  EVENT_EXPENSES("EVENT_EXPENSES"),
  
  SHIPPING("SHIPPING"),
  
  OTHER_TRAVEL_EXPENSES("OTHER_TRAVEL_EXPENSES"),
  
  CHARITY("CHARITY"),
  
  SOFTWARE_NON_RECURRING("SOFTWARE_NON_RECURRING"),
  
  LODGING("LODGING"),
  
  FACILITIES_EXPENSES("FACILITIES_EXPENSES"),
  
  SERVERS("SERVERS"),
  
  CONFERENCES("CONFERENCES"),
  
  FOOD_DELIVERY("FOOD_DELIVERY"),
  
  RENT("RENT"),
  
  AIRLINE_EXPENSES("AIRLINE_EXPENSES"),
  
  OTHER_BUSINESS_EXPENSES("OTHER_BUSINESS_EXPENSES"),
  
  BANK_AND_FINANCIAL_FEES("BANK_AND_FINANCIAL_FEES"),
  
  BOOKS_AND_NEWSPAPERS("BOOKS_AND_NEWSPAPERS"),
  
  CONSULTANT_AND_CONTRACTOR("CONSULTANT_AND_CONTRACTOR"),
  
  CORPORATE_INSURANCE("CORPORATE_INSURANCE"),
  
  DIGITAL_GOODS("DIGITAL_GOODS"),
  
  FEES_AND_LICENSES_AND_TAXES("FEES_AND_LICENSES_AND_TAXES"),
  
  GAS_AND_FUEL("GAS_AND_FUEL"),
  
  GENERAL_MERCHANDISE("GENERAL_MERCHANDISE"),
  
  MEDICAL("MEDICAL"),
  
  MEMBERSHIPS_AND_CLUBS("MEMBERSHIPS_AND_CLUBS"),
  
  PARKING_EXPENSES("PARKING_EXPENSES"),
  
  POLITICAL_DONATIONS("POLITICAL_DONATIONS"),
  
  PUBLIC_TRANSPORTATION("PUBLIC_TRANSPORTATION"),
  
  RECURRING_SOFTWARE_AND_SAAS("RECURRING_SOFTWARE_AND_SAAS"),
  
  RIDESHARE_AND_TAXI("RIDESHARE_AND_TAXI"),
  
  TOLL_AND_BRIDGE_FEES("TOLL_AND_BRIDGE_FEES"),
  
  TRAINING_AND_EDUCATION("TRAINING_AND_EDUCATION"),
  
  TRAVEL_WIFI("TRAVEL_WIFI");

  private String value;

  Category(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Category fromValue(String value) {
    for (Category b : Category.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Category> {
    @Override
    public void write(final JsonWriter jsonWriter, final Category enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Category read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Category.fromValue(value);
    }
  }
}

