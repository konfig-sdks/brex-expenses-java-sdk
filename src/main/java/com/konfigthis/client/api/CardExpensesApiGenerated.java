/*
 * Expenses API
 *  The Expenses API allows you to manage accounting and expenses information. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExpandableExpense;
import com.konfigthis.client.model.Expense;
import com.konfigthis.client.model.ExpensePaymentStatus;
import com.konfigthis.client.model.ExpenseStatus;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PageExpandableExpense;
import com.konfigthis.client.model.UpdateExpenseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardExpensesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardExpensesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardExpensesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String expenseId, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/card/{expense_id}"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand[]", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String expenseId, List<String> expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling getById(Async)");
        }

        return getByIdCall(expenseId, expand, _callback);

    }


    private ApiResponse<ExpandableExpense> getByIdWithHttpInfo(String expenseId, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(expenseId, expand, null);
        Type localVarReturnType = new TypeToken<ExpandableExpense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String expenseId, List<String> expand, final ApiCallback<ExpandableExpense> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(expenseId, expand, _callback);
        Type localVarReturnType = new TypeToken<ExpandableExpense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String expenseId;
        private List<String> expand;

        private GetByIdRequestBuilder(String expenseId) {
            this.expenseId = expenseId;
        }

        /**
         * Set expand
         * @param expand Get additional details for the expense, e.g. merchant mcc code, by passing in &#x60;expand[]&#x3D;merchant&#x60;. Query parameters include &#x60;location&#x60;, &#x60;department&#x60;, &#x60;merchant&#x60;, &#x60;receipts.download_uris&#x60;, &#x60;user&#x60;, &#x60;budget&#x60; and &#x60;payment&#x60;. (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(expenseId, expand, _callback);
        }


        /**
         * Execute getById request
         * @return ExpandableExpense
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ExpandableExpense execute() throws ApiException {
            ApiResponse<ExpandableExpense> localVarResp = getByIdWithHttpInfo(expenseId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ExpandableExpense&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpandableExpense> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(expenseId, expand);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpandableExpense> _callback) throws ApiException {
            return getByIdAsync(expenseId, expand, _callback);
        }
    }

    /**
     * Get an expense
     * Get an expense by its ID.
     * @param expenseId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getExpense 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String expenseId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
            

        return new GetByIdRequestBuilder(expenseId);
    }
    private okhttp3.Call listCall(List<String> expand, List<String> userId, List<String> parentExpenseId, List<String> budgetId, List<ExpenseStatus> status, List<ExpensePaymentStatus> paymentStatus, OffsetDateTime purchasedAtStart, OffsetDateTime purchasedAtEnd, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/card";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand[]", expand));
        }

        if (userId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "user_id[]", userId));
        }

        if (parentExpenseId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parent_expense_id[]", parentExpenseId));
        }

        if (budgetId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "budget_id[]", budgetId));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status[]", status));
        }

        if (paymentStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "payment_status[]", paymentStatus));
        }

        if (purchasedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchased_at_start", purchasedAtStart));
        }

        if (purchasedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchased_at_end", purchasedAtEnd));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(List<String> expand, List<String> userId, List<String> parentExpenseId, List<String> budgetId, List<ExpenseStatus> status, List<ExpensePaymentStatus> paymentStatus, OffsetDateTime purchasedAtStart, OffsetDateTime purchasedAtEnd, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCall(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit, _callback);

    }


    private ApiResponse<PageExpandableExpense> listWithHttpInfo(List<String> expand, List<String> userId, List<String> parentExpenseId, List<String> budgetId, List<ExpenseStatus> status, List<ExpensePaymentStatus> paymentStatus, OffsetDateTime purchasedAtStart, OffsetDateTime purchasedAtEnd, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit, null);
        Type localVarReturnType = new TypeToken<PageExpandableExpense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(List<String> expand, List<String> userId, List<String> parentExpenseId, List<String> budgetId, List<ExpenseStatus> status, List<ExpensePaymentStatus> paymentStatus, OffsetDateTime purchasedAtStart, OffsetDateTime purchasedAtEnd, String cursor, Integer limit, final ApiCallback<PageExpandableExpense> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<PageExpandableExpense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private List<String> expand;
        private List<String> userId;
        private List<String> parentExpenseId;
        private List<String> budgetId;
        private List<ExpenseStatus> status;
        private List<ExpensePaymentStatus> paymentStatus;
        private OffsetDateTime purchasedAtStart;
        private OffsetDateTime purchasedAtEnd;
        private String cursor;
        private Integer limit;

        private ListRequestBuilder() {
        }

        /**
         * Set expand
         * @param expand Get additional details for the expense, e.g. merchant mcc code, by passing in &#x60;expand[]&#x3D;merchant&#x60;. Query parameters include &#x60;location&#x60;, &#x60;department&#x60;, &#x60;merchant&#x60;, &#x60;receipts.download_uris&#x60;, &#x60;user&#x60;, &#x60;budget&#x60; and &#x60;payment&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Get expenses belong to provided user(s). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder userId(List<String> userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set parentExpenseId
         * @param parentExpenseId Get itemized expenses belong to provided parent expenses ID(s). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder parentExpenseId(List<String> parentExpenseId) {
            this.parentExpenseId = parentExpenseId;
            return this;
        }
        
        /**
         * Set budgetId
         * @param budgetId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder budgetId(List<String> budgetId) {
            this.budgetId = budgetId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(List<ExpenseStatus> status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set paymentStatus
         * @param paymentStatus  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder paymentStatus(List<ExpensePaymentStatus> paymentStatus) {
            this.paymentStatus = paymentStatus;
            return this;
        }
        
        /**
         * Set purchasedAtStart
         * @param purchasedAtStart  Shows only expenses with a &#x60;purchased_at&#x60; on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder purchasedAtStart(OffsetDateTime purchasedAtStart) {
            this.purchasedAtStart = purchasedAtStart;
            return this;
        }
        
        /**
         * Set purchasedAtEnd
         * @param purchasedAtEnd  Shows only expenses with a &#x60;purchased_at&#x60; on or before this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder purchasedAtEnd(OffsetDateTime purchasedAtEnd) {
            this.purchasedAtEnd = purchasedAtEnd;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor  The cursor to use for pagination. This is the &#x60;next_cursor&#x60; value returned from the previous response.  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listExpenses 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return PageExpandableExpense
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listExpenses 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageExpandableExpense execute() throws ApiException {
            ApiResponse<PageExpandableExpense> localVarResp = listWithHttpInfo(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PageExpandableExpense&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listExpenses 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageExpandableExpense> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listExpenses 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageExpandableExpense> _callback) throws ApiException {
            return listAsync(expand, userId, parentExpenseId, budgetId, status, paymentStatus, purchasedAtStart, purchasedAtEnd, cursor, limit, _callback);
        }
    }

    /**
     * List expenses
     * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listExpenses 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateExpenseCall(String expenseId, UpdateExpenseRequest updateExpenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExpenseRequest;

        // create path and map variables
        String localVarPath = "/v1/expenses/card/{expense_id}"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExpenseValidateBeforeCall(String expenseId, UpdateExpenseRequest updateExpenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling updateExpense(Async)");
        }

        // verify the required parameter 'updateExpenseRequest' is set
        if (updateExpenseRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExpenseRequest' when calling updateExpense(Async)");
        }

        return updateExpenseCall(expenseId, updateExpenseRequest, _callback);

    }


    private ApiResponse<Expense> updateExpenseWithHttpInfo(String expenseId, UpdateExpenseRequest updateExpenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExpenseValidateBeforeCall(expenseId, updateExpenseRequest, null);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExpenseAsync(String expenseId, UpdateExpenseRequest updateExpenseRequest, final ApiCallback<Expense> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExpenseValidateBeforeCall(expenseId, updateExpenseRequest, _callback);
        Type localVarReturnType = new TypeToken<Expense>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExpenseRequestBuilder {
        private final String expenseId;
        private String memo;

        private UpdateExpenseRequestBuilder(String expenseId) {
            this.expenseId = expenseId;
        }

        /**
         * Set memo
         * @param memo Expense memo. (optional)
         * @return UpdateExpenseRequestBuilder
         */
        public UpdateExpenseRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Build call for updateExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateExpenseRequest updateExpenseRequest = buildBodyParams();
            return updateExpenseCall(expenseId, updateExpenseRequest, _callback);
        }

        private UpdateExpenseRequest buildBodyParams() {
            UpdateExpenseRequest updateExpenseRequest = new UpdateExpenseRequest();
            updateExpenseRequest.memo(this.memo);
            return updateExpenseRequest;
        }

        /**
         * Execute updateExpense request
         * @return Expense
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Expense execute() throws ApiException {
            UpdateExpenseRequest updateExpenseRequest = buildBodyParams();
            ApiResponse<Expense> localVarResp = updateExpenseWithHttpInfo(expenseId, updateExpenseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExpense request with HTTP info returned
         * @return ApiResponse&lt;Expense&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Expense> executeWithHttpInfo() throws ApiException {
            UpdateExpenseRequest updateExpenseRequest = buildBodyParams();
            return updateExpenseWithHttpInfo(expenseId, updateExpenseRequest);
        }

        /**
         * Execute updateExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateExpense 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Expense> _callback) throws ApiException {
            UpdateExpenseRequest updateExpenseRequest = buildBodyParams();
            return updateExpenseAsync(expenseId, updateExpenseRequest, _callback);
        }
    }

    /**
     * Update an expense
     * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     * @param expenseId  (required)
     * @param updateExpenseRequest  (required)
     * @return UpdateExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateExpense 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExpenseRequestBuilder updateExpense(String expenseId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
            

        return new UpdateExpenseRequestBuilder(expenseId);
    }
}
