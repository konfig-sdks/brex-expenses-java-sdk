/*
 * Expenses API
 *  The Expenses API allows you to manage accounting and expenses information. 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateAsyncFileUploadResponse;
import com.konfigthis.client.model.ReceiptUploadRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReceiptUploadApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceiptUploadApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiptUploadApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewReceiptCall(String expenseId, ReceiptUploadRequest receiptUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receiptUploadRequest;

        // create path and map variables
        String localVarPath = "/v1/expenses/card/{expense_id}/receipt_upload"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewReceiptValidateBeforeCall(String expenseId, ReceiptUploadRequest receiptUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling createNewReceipt(Async)");
        }

        // verify the required parameter 'receiptUploadRequest' is set
        if (receiptUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'receiptUploadRequest' when calling createNewReceipt(Async)");
        }

        return createNewReceiptCall(expenseId, receiptUploadRequest, _callback);

    }


    private ApiResponse<CreateAsyncFileUploadResponse> createNewReceiptWithHttpInfo(String expenseId, ReceiptUploadRequest receiptUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewReceiptValidateBeforeCall(expenseId, receiptUploadRequest, null);
        Type localVarReturnType = new TypeToken<CreateAsyncFileUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewReceiptAsync(String expenseId, ReceiptUploadRequest receiptUploadRequest, final ApiCallback<CreateAsyncFileUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewReceiptValidateBeforeCall(expenseId, receiptUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAsyncFileUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewReceiptRequestBuilder {
        private final String receiptName;
        private final String expenseId;

        private CreateNewReceiptRequestBuilder(String receiptName, String expenseId) {
            this.receiptName = receiptName;
            this.expenseId = expenseId;
        }

        /**
         * Build call for createNewReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> receiptUpload 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReceiptUploadRequest receiptUploadRequest = buildBodyParams();
            return createNewReceiptCall(expenseId, receiptUploadRequest, _callback);
        }

        private ReceiptUploadRequest buildBodyParams() {
            ReceiptUploadRequest receiptUploadRequest = new ReceiptUploadRequest();
            receiptUploadRequest.receiptName(this.receiptName);
            return receiptUploadRequest;
        }

        /**
         * Execute createNewReceipt request
         * @return CreateAsyncFileUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> receiptUpload 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public CreateAsyncFileUploadResponse execute() throws ApiException {
            ReceiptUploadRequest receiptUploadRequest = buildBodyParams();
            ApiResponse<CreateAsyncFileUploadResponse> localVarResp = createNewReceiptWithHttpInfo(expenseId, receiptUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewReceipt request with HTTP info returned
         * @return ApiResponse&lt;CreateAsyncFileUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> receiptUpload 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateAsyncFileUploadResponse> executeWithHttpInfo() throws ApiException {
            ReceiptUploadRequest receiptUploadRequest = buildBodyParams();
            return createNewReceiptWithHttpInfo(expenseId, receiptUploadRequest);
        }

        /**
         * Execute createNewReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> receiptUpload 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateAsyncFileUploadResponse> _callback) throws ApiException {
            ReceiptUploadRequest receiptUploadRequest = buildBodyParams();
            return createNewReceiptAsync(expenseId, receiptUploadRequest, _callback);
        }
    }

    /**
     * Create a new receipt upload
     *  The &#x60;uri&#x60; will be a pre-signed S3 URL allowing you to upload the receipt securely. This URL can only be used for a &#x60;PUT&#x60; operation and expires 30 minutes after its creation. Once your upload is complete, we will try to match the receipt with existing expenses.  Refer to these [docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html) on how to upload to this pre-signed S3 URL. We highly recommend using one of AWS SDKs if they&#39;re available for your language to upload these files. 
     * @param expenseId  (required)
     * @param receiptUploadRequest  (required)
     * @return CreateNewReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> receiptUpload 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewReceiptRequestBuilder createNewReceipt(String receiptName, String expenseId) throws IllegalArgumentException {
        if (receiptName == null) throw new IllegalArgumentException("\"receiptName\" is required but got null");
            

        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
            

        return new CreateNewReceiptRequestBuilder(receiptName, expenseId);
    }
}
